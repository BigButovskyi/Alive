{"version":3,"sources":["components/Parallax/Parallax.css","containers/PageContainer/PageContainer.css","App.css","components/UI/NavigationBar/NavigationBar.css","assets/images/parallax/clouds.png","assets/images/parallax/mountains.jpg","assets/images/parallax/man.png","components/UI/NavigationBar/NavigationBar.js","components/Parallax/Parallax.js","containers/PageContainer/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","className","classes","Component","Parallax","state","movement","alive","speed","transform","clouds","man","mountains","scrollHandler","clientY","window","pageYOffset","elementsMove","Object","keys","forEach","key","elYC","setState","document","addEventListener","this","removeEventListener","c","style","mountain","al","ve","cloudsParent","src","alt","PageContainer","header","main","width","height","background","App","Boolean","location","hostname","match","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,SAAW,mBAAmB,SAAW,mBAAmB,MAAQ,mBAAmB,IAAM,mBAAmB,aAAe,mBAAmB,OAAS,qB,oBCA7KD,EAAOC,QAAU,CAAC,cAAgB,wBAAwB,OAAS,wBAAwB,KAAO,0B,kBCAlGD,EAAOC,QAAU,CAAC,IAAM,gB,gBCAxBD,EAAOC,QAAU,CAAC,cAAgB,0B,gBCDlCD,EAAOC,QAAU,IAA0B,oC,wECA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,6JCa5BC,E,uKARP,OACI,yBAAKC,UAAWC,IAAQF,eAAxB,qB,GAHgBG,a,uDCgEbC,E,4MA5DXC,MAAQ,CACJC,SAAU,CACNC,MAAO,CACHC,MAAO,GACPC,UAAW,iBAEfC,OAAQ,CACJF,OAAQ,GACRC,UAAW,iBAEfE,IAAK,CACDH,MAAO,GACPC,UAAW,iBAEfG,UAAW,CACPJ,MAAO,IACPC,UAAW,mB,EAavBI,cAAgB,WACZ,IAAIC,EAAUC,OAAOC,YACjBC,EAAY,eAAO,EAAKZ,MAAMC,UAClCY,OAAOC,KAAKF,GAAcG,SAAQ,SAACC,GAC/B,IAAIC,EAAOR,EAAUG,EAAaI,GAAKb,MACvCS,EAAaI,GAAKZ,UAAY,cAAgBa,EAAO,SAGzD,EAAKC,SAAS,CACVjB,SAASW,K,kEAhBbO,SAASC,iBAAiB,SAAUC,KAAKb,iB,6CAIzCW,SAASG,oBAAoB,SAAUD,KAAKb,iB,+BAiB5C,OACI,yBAAKZ,UAAW2B,IAAExB,UACd,yBAAKyB,MAAO,CAACpB,UAAUiB,KAAKrB,MAAMC,SAASM,UAAUH,WAAYR,UAAW2B,IAAEE,WAC9E,yBAAKD,MAAO,CAACpB,UAAUiB,KAAKrB,MAAMC,SAASC,MAAME,WAAYR,UAAW2B,IAAErB,OACtE,0BAAMN,UAAW2B,IAAEG,IAAnB,MACA,0BAAM9B,UAAW2B,IAAEI,IAAnB,OAEJ,yBAAKH,MAAO,CAACpB,UAAUiB,KAAKrB,MAAMC,SAASK,IAAIF,WAAYR,UAAW2B,IAAEjB,MACxE,yBAAKV,UAAW2B,IAAEK,cACd,yBAAKJ,MAAO,CAACpB,UAAUiB,KAAKrB,MAAMC,SAASI,OAAOD,WAAYyB,IAAKxB,IAAQT,UAAW2B,IAAElB,OAAQyB,IAAK,iB,GArDlGhC,aCeRiC,E,uKAdP,OACI,yBAAKnC,UAAWC,IAAQkC,eACpB,4BAAQnC,UAAWC,IAAQmC,QACvB,kBAAC,EAAD,OAEJ,0BAAMpC,UAAWC,IAAQoC,MACrB,kBAAC,EAAD,MACA,6BAAST,MAAO,CAACU,MAAM,OAAOC,OAAO,QAASC,WAAY,iB,GATlDtC,aCSbuC,E,uKARP,OACI,yBAAKzC,UAAWC,IAAQwC,KACpB,kBAAC,EAAD,W,GAJEvC,aCQEwC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCXN,IAAMC,EACF,kBAAC,EAAD,MAGJC,IAASC,OAAOF,EAAIvB,SAAS0B,eAAe,SDwHtC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf3d5a25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Parallax\":\"Parallax___3pqOD\",\"mountain\":\"Parallax___rhPNi\",\"alive\":\"Parallax___3gXeI\",\"man\":\"Parallax___2Mk8B\",\"cloudsParent\":\"Parallax___2DVsQ\",\"clouds\":\"Parallax___3MH8X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PageContainer\":\"PageContainer___1_W7E\",\"header\":\"PageContainer___fiPCq\",\"main\":\"PageContainer___3Zw8M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App___1o-Fp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationBar\":\"NavigationBar___3ZwD4\"};","module.exports = __webpack_public_path__ + \"static/media/clouds.308ee0f6.png\";","module.exports = __webpack_public_path__ + \"static/media/mountains.0e928193.jpg\";","module.exports = __webpack_public_path__ + \"static/media/man.4a714e9e.png\";","import React, {Component} from \"react\";\r\nimport classes from \"./NavigationBar.css\";\r\n\r\nclass NavigationBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className={classes.NavigationBar}>\r\n                Hello, its me\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, {Component} from \"react\";\r\nimport c from \"./Parallax.css\";\r\nimport mountain from \"../../assets/images/parallax/mountains.jpg\";\r\nimport man from \"../../assets/images/parallax/man.png\";\r\nimport clouds from \"../../assets/images/parallax/clouds.png\";\r\n\r\nclass Parallax extends Component{\r\n    state = {\r\n        movement: {\r\n            alive: {\r\n                speed: 0.8,\r\n                transform: \"translateY(0)\"\r\n            },\r\n            clouds: {\r\n                speed: -0.8,\r\n                transform: \"translateY(0)\"\r\n            },\r\n            man: {\r\n                speed: 0.4,\r\n                transform: \"translateY(0)\"\r\n            },\r\n            mountains: {\r\n                speed: 0.03,\r\n                transform: \"translateY(0)\"\r\n            },\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"scroll\", this.scrollHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"scroll\", this.scrollHandler);\r\n    }\r\n\r\n    scrollHandler = () => {\r\n        let clientY = window.pageYOffset;\r\n        let elementsMove = {...this.state.movement};\r\n        Object.keys(elementsMove).forEach((key) => {\r\n            let elYC = clientY * elementsMove[key].speed;\r\n            elementsMove[key].transform = \"translateY(\" + elYC + \"px)\";\r\n        });\r\n\r\n        this.setState({\r\n            movement:elementsMove\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className={c.Parallax}>\r\n                <div style={{transform:this.state.movement.mountains.transform}} className={c.mountain}></div>\r\n                <div style={{transform:this.state.movement.alive.transform}} className={c.alive}>\r\n                    <span className={c.al}>AL</span>\r\n                    <span className={c.ve}>VE</span>\r\n                </div>\r\n                <div style={{transform:this.state.movement.man.transform}} className={c.man}></div>\r\n                <div className={c.cloudsParent}>\r\n                    <img style={{transform:this.state.movement.clouds.transform}} src={clouds} className={c.clouds} alt={\"clouds\"}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Parallax;","import React, {Component} from \"react\";\r\nimport classes from \"./PageContainer.css\";\r\nimport NavigationBar from \"../../components/UI/NavigationBar/NavigationBar\";\r\nimport Parallax from \"../../components/Parallax/Parallax\";\r\n\r\nclass PageContainer extends Component{\r\n    render() {\r\n        return (\r\n            <div className={classes.PageContainer}>\r\n                <header className={classes.header}>\r\n                    <NavigationBar/>\r\n                </header>\r\n                <main className={classes.main}>\r\n                    <Parallax/>\r\n                    <section style={{width:\"100%\",height:\"100vh\", background: \"black\"}}></section>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PageContainer;","import React, {Component} from 'react';\nimport classes from './App.css';\nimport PageContainer from \"./containers/PageContainer/PageContainer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className={classes.App}>\n                <PageContainer/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst app = (\n    <App/>\n);\n\nReactDOM.render(app,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/MainBody/Parallax/Parallax.css","components/MainBody/MainBody.css","App.css","containers/PageContainer/PageContainer.css","components/UI/NavigationBar/NavigationBar.css","assets/images/parallax/clouds.png","components/UI/NavigationBar/NavigationBar.js","components/MainBody/Parallax/Parallax.js","components/MainBody/scrollAnimation.js","components/MainBody/MainBody.js","containers/PageContainer/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","className","classes","Component","Parallax","state","movement","alive","speed","transform","clouds","man","mountains","scrollHandler","clientY","window","pageYOffset","elementsMove","Object","keys","forEach","key","elYC","setState","document","addEventListener","this","removeEventListener","c","style","mountain","al","ve","cloudsParent","src","alt","sliderHandler","position","isNext","SCROLLCOEF","getCoef","html","documentElement","scrollPosition","Math","round","scrollTop","timeLeft","scrollByPixel","setInterval","newScrollPosition","easeInOut","clearInterval","innerHeight","t","power","pow","MainBody","timeAnimation","e","nextSlide","deltaY","currentPosition","Date","getTime","onWheel","scrollSnap","background","PageContainer","props","App","Boolean","location","hostname","match","app","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.134e7f8f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Parallax\":\"Parallax___3E4Rf\",\"mountain\":\"Parallax___199yD\",\"alive\":\"Parallax___5d9sw\",\"man\":\"Parallax___1vrEh\",\"cloudsParent\":\"Parallax___69gU-\",\"clouds\":\"Parallax___2I32M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainBody\":\"MainBody___1iAr5\",\"scrollSnap\":\"MainBody___HLoMk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App___1o-Fp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PageContainer\":\"PageContainer___1_W7E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationBar\":\"NavigationBar___3ZwD4\"};","module.exports = __webpack_public_path__ + \"static/media/clouds.308ee0f6.png\";","import React, {Component} from \"react\";\r\nimport classes from \"./NavigationBar.css\";\r\n\r\nclass NavigationBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className={classes.NavigationBar}>\r\n                Hello, its me\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, {Component} from \"react\";\r\nimport c from \"./Parallax.css\";\r\n// import mountain from \"../../../assets/images/parallax/mountains.jpg\";\r\n// import man from \"../../../assets/images/parallax/man.png\";\r\nimport clouds from \"../../../assets/images/parallax/clouds.png\";\r\n\r\nclass Parallax extends Component {\r\n    state = {\r\n        movement: {\r\n            alive: {\r\n                speed: 0.8,\r\n                transform: \"translateY(0)\"\r\n            },\r\n            clouds: {\r\n                speed: -0.8,\r\n                transform: \"translateY(0)\"\r\n            },\r\n            man: {\r\n                speed: 0.4,\r\n                transform: \"translateY(0)\"\r\n            },\r\n            mountains: {\r\n                speed: 0.03,\r\n                transform: \"translateY(0)\"\r\n            },\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"scroll\", this.scrollHandler);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"scroll\", this.scrollHandler);\r\n    }\r\n\r\n    scrollHandler = () => {\r\n        let clientY = window.pageYOffset;\r\n        let elementsMove = {...this.state.movement};\r\n        Object.keys(elementsMove).forEach((key) => {\r\n            let elYC = clientY * elementsMove[key].speed;\r\n            elementsMove[key].transform = \"translateY(\" + elYC + \"px)\";\r\n\r\n        });\r\n\r\n        this.setState({\r\n            movement: elementsMove\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={c.Parallax}>\r\n                <div style={{transform: this.state.movement.mountains.transform}} className={c.mountain}></div>\r\n                <div style={{transform: this.state.movement.alive.transform}} className={c.alive}>\r\n                    <span className={c.al}>AL</span>\r\n                    <span className={c.ve}>VE</span>\r\n                </div>\r\n                <div style={{transform: this.state.movement.man.transform}} className={c.man}></div>\r\n                <div className={c.cloudsParent}>\r\n                    <img style={{transform: this.state.movement.clouds.transform}} src={clouds} className={c.clouds}\r\n                         alt={\"clouds\"}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Parallax;","export let sliderHandler = (position, isNext) => {\r\n    const SCROLLCOEF = getCoef(position, isNext);\r\n    if (SCROLLCOEF !== 0) {\r\n        let html = document.documentElement;\r\n        let totalTime = 600;\r\n        let easingPower = 3;\r\n        let timeInterval = 1; //in ms\r\n        let scrollPosition = Math.round(html.scrollTop);\r\n        scrollPosition = (scrollPosition === 0)? 1:scrollPosition;\r\n        let timeLeft = totalTime;\r\n        let scrollByPixel = setInterval(() => {\r\n            let percentSpent = (totalTime - timeLeft) / totalTime;\r\n            if (timeLeft >= 0) {\r\n                let newScrollPosition = scrollPosition * (1 - SCROLLCOEF * easeInOut(percentSpent, easingPower));\r\n                html.scrollTop = newScrollPosition;\r\n                timeLeft--;\r\n            } else {\r\n                clearInterval(scrollByPixel);\r\n            }\r\n        }, timeInterval);\r\n    }\r\n};\r\n\r\nlet getCoef = (position, isNext) => {\r\n    if (position === 1 && isNext) {\r\n        return -(window.innerHeight - 1);\r\n    } else if (position === 2) {\r\n        if (isNext) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    } else if (position === 3 && (!isNext)) {\r\n        return 0.5;\r\n    }\r\n\r\n    return 0;\r\n};\r\n\r\nlet easeInOut = (t, power) => {\r\n    if (t < 0.5) {\r\n        return 0.5 * Math.pow(2 * t, power);\r\n    } else {\r\n        return 0.5 * (2 - Math.pow(2 * (1 - t), power));\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport classes from \"./MainBody.css\";\r\nimport Parallax from \"./Parallax/Parallax\";\r\nimport {sliderHandler} from \"./scrollAnimation\";\r\n\r\nclass MainBody extends Component {\r\n\r\n    state = {\r\n        position: 1,\r\n        timeAnimation: 0\r\n    }\r\n\r\n    scrollHandler = (e) => {\r\n        let nextSlide = e.deltaY > 0;\r\n        let currentPosition = this.state.position;\r\n        let scrollTime = new Date().getTime();\r\n        if (scrollTime - this.state.timeAnimation > 2500) {\r\n            if (nextSlide && currentPosition !== 3) {\r\n                sliderHandler(this.state.position, true);\r\n\r\n                this.setState({\r\n                    position: currentPosition + 1,\r\n                    timeAnimation: new Date().getTime()\r\n                });\r\n            } else if((!nextSlide) && currentPosition !== 1) {\r\n                sliderHandler(this.state.position, false);\r\n\r\n                this.setState({\r\n                    position: currentPosition - 1,\r\n                    timeAnimation: new Date().getTime()\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div onWheel={(e) => this.scrollHandler(e)} className={classes.MainBody}>\r\n                <Parallax/>\r\n                <section className={classes.scrollSnap} style={{\r\n                    background: \"brown\"\r\n                }}>\r\n                </section>\r\n                <section style={{\r\n                    background: \"yellow\"\r\n                }} className={classes.scrollSnap}>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainBody;","import React from \"react\";\r\nimport classes from \"./PageContainer.css\";\r\nimport NavigationBar from \"../../components/UI/NavigationBar/NavigationBar\";\r\nimport MainBody from \"../../components/MainBody/MainBody\";\r\n\r\nconst PageContainer = (props) => {\r\n    return (\r\n        <div className={classes.PageContainer}>\r\n            <header>\r\n                <NavigationBar/>\r\n            </header>\r\n            <main>\r\n                <MainBody/>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageContainer;","import React, {Component} from 'react';\nimport classes from './App.css';\nimport PageContainer from \"./containers/PageContainer/PageContainer\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className={classes.App}>\n                <PageContainer/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst app = (\n    <App/>\n);\n\nReactDOM.render(app,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}